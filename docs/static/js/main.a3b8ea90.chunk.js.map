{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","components/helpers/getGif.js","components/GifGrid.js","hooks/useFetchGif.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAgCeA,EA7BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,IADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAcrC,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAmBO,OACpCN,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAST,EACTU,SAhBkB,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,aCLnBG,EAAc,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACpC,OACI,qBAAIC,UAAU,yCAAd,UACA,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,MAFwDD,I,uBCHvDM,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEDG,MAAMR,GAFL,cAEbS,EAFa,gBAGEA,EAAIC,OAHN,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAIc,EAAIC,OAAOC,iBAAiBhB,QATrB,kBAaZY,GAbY,4CAAH,sDCIPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECFZ,SAACA,GAAc,IAAD,EACZrB,mBAAS,CAC/B2B,KAAK,GACLO,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAVAC,qBAAU,WACTjB,EAAQC,GACPiB,MAAK,SAAAC,GACEH,EAAS,CACLT,KAAKY,EACLL,SAAQ,SAGnB,CAACb,IAEIc,EDZyBK,CAAYnB,GAA/BU,EAFuB,EAE5BJ,KAAaO,EAFe,EAEfA,QAGpB,OACI,qCACCA,GAAW,mBAAGjB,UAAU,mCAAb,wBACZ,6BAAKI,IACL,oBAAIJ,UAAU,YAAd,SACIc,EAAOF,KAAI,gBAAEf,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAOC,EAAb,EAAaA,IAAb,OACX,cAAC,EAAD,CAAsBD,MAAOA,EAAOC,IAAKA,GAAvBF,YEZjB2B,EAAe,WAAO,IAAD,EACGzC,mBAAS,CAAC,cADb,mBAC1B0C,EAD0B,KACd3C,EADc,KAG9B,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,8BACM2C,EAAWb,KAAI,SAACR,GAAD,OACb,cAAC,EAAD,CAEIA,SAAWA,GADNA,YCT7BsB,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.a3b8ea90.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue (e.target.value);\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cat => [inputValue,...cat ]);\r\n            setInputValue('');\r\n        }     \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n            type=\"text\"\r\n            value = {inputValue}\r\n            onChange={handleInputChange}\r\n            />\r\n        \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes ={\r\n    setCategories : PropTypes.func.isRequired,\r\n}\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return(\r\n        <li className=\"card animate__animated animate__fadeIn\" key={id}>    \r\n        <img src={url} alt={title} />\r\n        <p>{title}</p>\r\n        </li>\r\n              \r\n    )\r\n}\r\n","\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=KaUQVfq9ssRibcG9aLvy1lOY07xZAaxd`;\r\n    const res = await fetch(url);\r\n    const {data} = await res.json();\r\n\r\n    const gifs = data.map((img)=>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url:img.images.downsized_medium.url\r\n        }\r\n    });\r\n    //setimages(gifs);\r\n    return gifs;\r\n}","import React from 'react';\r\nimport {GifGridItem}  from './GifGridItem';\r\n//import {getGifs} from './helpers/getGif';\r\nimport {useFetchGif} from './../hooks/useFetchGif'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGif(category);\r\n    \r\n    \r\n    return (\r\n        <>\r\n        {loading && <p className='animate__animated animate__flash'>Loading...</p>}\r\n        <h3>{category}</h3>\r\n        <ol className='card-grid'>{\r\n            images.map(({id, title, url})=>(\r\n            <GifGridItem key={id} title={title} url={url} />\r\n            ))\r\n            }\r\n        </ol> \r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport {getGifs} from './../components/helpers/getGif';\r\n\r\nexport const useFetchGif = (category) => {\r\n   const [state, setState] = useState({\r\n       data:[],\r\n       loading:true\r\n   });\r\n\r\n   useEffect(() => {\r\n    getGifs(category)\r\n    .then(imgs => {\r\n            setState({\r\n                data:imgs,\r\n                loading:false\r\n            });      \r\n    });\r\n   },[category])\r\n\r\n   return state;\r\n}\r\n","import React, {useState} from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <hr />\r\n            <AddCategory setCategories={setCategories}/>\r\n            <div>\r\n                { categories.map((category) =>   \r\n                    <GifGrid\r\n                        key={category}\r\n                        category ={category}\r\n                    />     \r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './components/GifExpertApp';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}